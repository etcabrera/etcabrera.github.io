---
import "./index.scss";
import BaseLayout from "../layouts/BaseLayout.astro";
import retrato from "../assets/retrato_blu.png";
// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.

// Indica a Astro que esta página debe ser renderizada en el servidor
// export const prerender = false;
---

<BaseLayout title="Mi Portafolio">
	<div class="parallax"></div>
	<main>
		<section class="c-header">
			<h1>Tomás Cabrer<span class="c-caret__effect">a</span></h1>
			<p class="c-header__subtitle">UX/UI & Web Developer</p>
		</section>
		<section class="c-section" id="sobre-mi">
			<h2 class="c-section__title">Quién soy?</h2>
			<div class="c-section__body">
				Soy un profesional de IT con experiencia en diseño UX y
				desarrollo web, capaz de cubrir el ciclo completo del diseño,
				desde la investigación y prototipado (con Figma, Adobe XD) hasta
				la implementación con HTML, SCSS y JavaScript ES6+. Destaco por
				mi capacidad de colaboración, demostrada en proyectos como la
				integración de prototipos con Angular 17 para empresas de salud
				en Puerto Rico.
			</div>
			<img
				src={retrato.src}
				alt="Foto de Tomás Cabrera"
				id="retrato-me"
			/>
		</section>
		<section class="c-section" id="servicios">
			<h2 class="c-section__title">Cuáles son mis servicios?</h2>
			<div class="c-section__body">
				Como Diseñador UX/UI, ofrezco servicios que abarcan la
				investigación de usuarios, la creación de wireframes y
				prototipos, y el diseño de interfaces, buscando siempre una
				experiencia de usuario óptima. En Desarrollo Web, tengo
				experiencia creando aplicaciones front-end con Angular, HTML,
				SCSS, JavaScript y jQuery, brindando soluciones funcionales.
			</div>
		</section>
		<div class="c-call_action">
			<p>
				Tu proyecto ideal está a <span>un click</span>
			</p>
			<button
				class="c-button"
				onclick="document.getElementById('contacto')?.scrollIntoView({ behavior: 'smooth' })"
			>
				Contactame ahora!
			</button>
		</div>
		<span></span>
		<section class="c-section" id="experiencia">
			<h2 class="c-section__title">Mi experiencia</h2>
			<div class="c-section__body">
				<p>
					Con una sólida trayectoria de cuatro años en desarrollo
					front-end, domino tecnologías como Angular y JavaScript.
					Además, integro habilidades en diseño gráfico, UX y diseño
					web, utilizando herramientas de la suite Adobe y Figma. Mi
					enfoque se centra en la mejora continua y la expansión de
					mis conocimientos en el área de desarrollo.
				</p>
			</div>
		</section>
		<section class="c-section" id="contacto">
			<h2 class="c-section__title">Contactame!</h2>
			<div class="c-section__body">
				<p>
					Podés contactarme a través de LinkedIn haciendo click
					<a
						href="https://www.linkedin.com/in/tom%C3%A1s-cabrera/"
						target="_blank">aquí</a
					>, enviándome un correo a <a
						href="mailto:e.tomas.cabrera@gmail.com"
						>e.tomas.cabrera@gmail.com</a
					>
					o completando el formulario de aquí abajo, y pronto estaremos
					conversando.
				</p>
				<form method="post" id="contact-form">
					<div class="c-form__group">
						<label for="nombre"
							>Nombre <span class="is-required">*</span></label
						>
						<input type="text" id="nombre" name="nombre" required />
					</div>
					<div class="c-form__group">
						<label for="email"
							>Email <span class="is-required">*</span></label
						>
						<input type="email" id="email" name="email" required />
					</div>
					<div class="c-form__group">
						<label for="telefono"
							>Teléfono <span class="is-required">*</span></label
						>
						<input
							type="tel"
							id="telefono"
							name="telefono"
							required
						/>
					</div>
					<div class="c-form__group">
						<label for="mensaje"
							>Mensaje <span class="is-required">*</span></label
						>
						<textarea id="mensaje" name="mensaje" required
						></textarea>
					</div>
					<input
						type="hidden"
						name="_autoresponse"
						value="Muchas gracias por enviar este mensaje, mientras tanto podés contactarme a través de mi perfil en LinkedIn: https://www.linkedin.com/in/tom%C3%A1s-cabrera/"
					/>
					<button
						class="c-button"
						type="submit"
						value="Enviar"
						id="submit-form">Enviar mensaje</button
					>
				</form>
				<p id="mensaje-respuesta" hidden></p>
			</div>
		</section>
	</main>
</BaseLayout>

<script>
	document.addEventListener("DOMContentLoaded", () => {
		// Add 'loaded' class to body to trigger its fade-in animation
		document.body.classList.add("loaded");

		const sections = document.querySelectorAll(".c-section");
		const observerOptions = {
			root: null,
			rootMargin: "0px",
			threshold: 0.1, // Adjust threshold as needed, 0.1 means 10% of the element is visible
		};

		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				const target = entry.target;
				if (entry.isIntersecting) {
					// console.log("Intersecting, making visible:", target.id || target.className);
					target.classList.add("is-visible");
					target.classList.remove("is-hidden-up");
				} else {
					// Not intersecting
					// console.log("Not intersecting:", target.id || target.className, "Bottom:", entry.boundingClientRect.bottom, "Top:", entry.boundingClientRect.top);
					target.classList.remove("is-visible");
					// Check if the element is now above the viewport
					if (entry.boundingClientRect.bottom < 0) {
						// console.log("Element above viewport, adding is-hidden-up:", target.id || target.className);
						target.classList.add("is-hidden-up");
					} else {
						// Element is below the viewport or in a state where it's not "hidden-up"
						// console.log("Element not above (likely below), removing is-hidden-up:", target.id || target.className);
						target.classList.remove("is-hidden-up");
					}
				}
			});
		}, observerOptions);

		sections.forEach((section) => {
			observer.observe(section);
		});

		// Validation
		const runValidations = () => {
			let isValid = true;
			// Explicitly type the form elements
			const nombreInput = document.getElementById("nombre") as HTMLInputElement;
			const emailInput = document.getElementById("email") as HTMLInputElement;
			const telefonoInput = document.getElementById("telefono") as HTMLInputElement;
			const mensajeInput = document.getElementById("mensaje") as HTMLTextAreaElement;

			// Reset previous invalid states
			nombreInput.classList.remove("is-invalid");
			emailInput.classList.remove("is-invalid");
			telefonoInput.classList.remove("is-invalid");
			mensajeInput.classList.remove("is-invalid");

			// Get current values directly for validation
			const data = {
				nombre: nombreInput.value,
				email: emailInput.value,
				telefono: telefonoInput.value,
				mensaje: mensajeInput.value,
			};

			if (!data.nombre) {
				nombreInput.classList.add("is-invalid");
				isValid = false;
			}

			if (!data.email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email)) {
				emailInput.classList.add("is-invalid");
				isValid = false;
			}

			if (!data.telefono) {
				telefonoInput.classList.add("is-invalid");
				isValid = false;
			}

			if (!data.mensaje) {
				mensajeInput.classList.add("is-invalid");
				isValid = false;
			}

			if (!isValid) {
				console.log("Form validation failed");
				return false; // Indicate validation failure
			}
			return true; // Indicate validation success
		}

		// Debounce function
		let debounceTimer: number;
		const debouncedValidate = () => {
			clearTimeout(debounceTimer);
			debounceTimer = window.setTimeout(() => {
				runValidations();
			}, 500);
		};

		const form = document.getElementById("contact-form") as HTMLFormElement;
		const formInputs = form.querySelectorAll("input, textarea");

		formInputs.forEach(input => {
			input.addEventListener("keyup", debouncedValidate);
		});

		form?.addEventListener("submit", (event) => {
			event.preventDefault(); // Prevents page reload
			
			if (!runValidations()) {
				return; // Stop submission if validation fails
			}

			const formData = new FormData(form);
			const data: {[key:string]:any} = {};
			for (const [key, value] of formData.entries()) {
				data[key] = value;				
			}

			let mensaje = null;

			fetch("https://formsubmit.co/ajax/a0e7f1761136a918757612b9a39ef47d", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
					Accept: "application/json",
				},
				body: JSON.stringify(data),
			})
				.then((response) => {
					if (response.ok) {
						mensaje =
							"Gracias por tu mensaje, pronto te estaré respondiendo! Mientras tanto podés visitarme a mi LinkedIn por <a href='https://www.linkedin.com/in/tom%C3%A1s-cabrera/'>aquí</a>";
						form.reset();
					} else {
						mensaje =
							"Ha ocurrido un error al intentar enviar el formulario. Inténtalo de nuevo más tarde.";
					}
					document
						.getElementById("mensaje-respuesta")
						?.removeAttribute("hidden");
					document.getElementById("mensaje-respuesta")!.innerHTML =
						mensaje;
					return response.json();
				})
				.then((data) => console.log(data))
				.catch((error) => console.log(error));
		});
	});
</script>
