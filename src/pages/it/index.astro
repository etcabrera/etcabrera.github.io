---
import "../index.scss";
import BaseLayout from "../../layouts/BaseLayout.astro";
import retrato from "../../assets/retrato_blu.png";
import Button from "../../components/button.astro";
import Send from "@lucide/astro/icons/send";
import Languages from "@lucide/astro/icons/languages";
import { getAbsoluteLocaleUrl, getRelativeLocaleUrl } from "astro:i18n";

const Year = new Date().getFullYear();
---

<BaseLayout title="Il mio portfolio">
	<nav class="c-nav">
		<Languages />
		Disponibile in altri linguaggi:
		<ul class="c-nav__list">
			<li class="c-nav__item">
				<a
					href={getRelativeLocaleUrl("es", "/")}
					class="c-nav__item-link">Esp</a
				>
			</li>
			<li class="c-nav__item">
				<a
					href={getRelativeLocaleUrl("en", "/")}
					class="c-nav__item-link">Eng</a
				>
			</li>
			<li class="c-nav__item">
				<a href="#" class="c-nav__item-link">Ita</a>
			</li>
		</ul>
	</nav>
	<div class="parallax"></div>
	<main>
		<section class="c-header">
			<h1>Tomás Cabrer<span class="c-caret__effect">a</span></h1>
			<p class="c-header__subtitle">UX/UI & Web Developer</p>
		</section>
		<section class="c-section" id="sobre-mi">
			<h2 class="c-section__title">Chi sono?</h2>
			<div class="c-section__body">
				Sono un professionista IT con esperienza in UX design e sviluppo
				web, in grado di coprire l'intero ciclo di progettazione, dalla
				ricerca e prototipazione (con Figma, Adobe XD)
				all'implementazione con HTML, SCSS e JavaScript ES6+. Mi
				distinguo per la mia capacità di collaborazione, dimostrata in
				progetti come l'integrazione di prototipi con Angular 17 per
				aziende sanitarie di Porto Rico.
			</div>
			<img
				src={retrato.src}
				alt="Foto de Tomás Cabrera"
				id="retrato-me"
			/>
		</section>
		<section class="c-section" id="servicios">
			<h2 class="c-section__title">Cuali sono i miei servizi?</h2>
			<div class="c-section__body">
				Come UX/UI Designer, offro servizi che comprendono ricerca sugli
				utenti, wireframing e prototipazione, e design dell'interfaccia,
				sempre alla ricerca di un'esperienza utente ottimale. Nello
				sviluppo web, ho esperienza nella creazione di applicazioni
				front-end con Angular, HTML, SCSS, JavaScript e jQuery, fornendo
				soluzioni funzionali.
			</div>
		</section>
		<div class="c-call_action">
			<p>
				Il vostro progetto ideale è a portata <span>di click</span>
			</p>
			<Button
				className="c-button is-primary"
				onClick="document.getElementById('contacto')?.scrollIntoView({ behavior: 'smooth' })"
				text="Contattami ora!"
			>
				<Send />
			</Button>
		</div>
		<section class="c-section" id="experiencia">
			<h2 class="c-section__title">La mia esperienza</h2>
			<div class="c-section__body">
				<p>
					Ho quattro anni di esperienza solida nello sviluppo
					front-end, sono competente in tecnologie come Angular e
					JavaScript. Inoltre, integro competenze di graphic design,
					UX e web design, utilizzando strumenti della suite Adobe e
					Figma. Il mio obiettivo è il miglioramento continuo e
					l'ampliamento delle mie conoscenze di sviluppo.
				</p>
			</div>
		</section>
		<section class="c-section" id="contacto">
			<h2 class="c-section__title">Contattami!</h2>
			<div class="c-section__body">
				<p>
					Potete raggiungermi direttamente su LinkedIn cliccando
					<a
						href="https://www.linkedin.com/in/tom%C3%A1s-cabrera/"
						target="_blank">qui</a
					>, inviandomi un'email su <a
						href="mailto:e.tomas.cabrera@gmail.com"
						>e.tomas.cabrera@gmail.com</a
					>
					oppure compilando il modulo sottostante. Ci sentiremo presto!
				</p>
				<form method="post" id="contact-form">
					<div class="c-form__group">
						<label for="nombre"
							>Nome <span class="is-required">*</span></label
						>
						<input type="text" id="nombre" name="nombre" required />
						<span class="c-input__helper-text"></span>
					</div>
					<div class="c-form__group">
						<label for="email"
							>Email <span class="is-required">*</span></label
						>
						<input type="email" id="email" name="email" required />
						<span class="c-input__helper-text"></span>
					</div>
					<div class="c-form__group">
						<label for="telefono"
							>Telefono <span class="is-required">*</span></label
						>
						<input
							type="tel"
							id="telefono"
							name="telefono"
							required
						/>
						<span class="c-input__helper-text"></span>
					</div>
					<div class="c-form__group">
						<label for="mensaje"
							>Menssaggio <span class="is-required">*</span></label
						>
						<textarea id="mensaje" name="mensaje" required
						></textarea>
						<span class="c-input__helper-text"></span>
					</div>
					<input
						type="hidden"
						name="_autoresponse"
						value=""
					/>
					<Button
						className="is-primary"
						type="submit"
						text="Inviare messaggio"
						id="submit-form"
					>
						<Send />
					</Button>
					<p id="mensaje-respuesta" hidden></p>
				</form>
			</div>
		</section>
	</main>
	<footer class="c-footer">
		{Year}, Tomás Cabrera. Tutti i diritti riservati.
	</footer>
</BaseLayout>

<script>
	document.addEventListener("DOMContentLoaded", () => {
		// Add 'loaded' class to body to trigger its fade-in animation
		document.body.classList.add("loaded");

		const sections = document.querySelectorAll(".c-section");
		const observerOptions = {
			root: null,
			rootMargin: "0px",
			threshold: 0.1, // Adjust threshold as needed, 0.1 means 10% of the element is visible
		};

		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				const target = entry.target;
				if (entry.isIntersecting) {
					// console.log("Intersecting, making visible:", target.id || target.className);
					target.classList.add("is-visible");
					target.classList.remove("is-hidden-up");
				} else {
					// Not intersecting
					// console.log("Not intersecting:", target.id || target.className, "Bottom:", entry.boundingClientRect.bottom, "Top:", entry.boundingClientRect.top);
					target.classList.remove("is-visible");
					// Check if the element is now above the viewport
					if (entry.boundingClientRect.bottom < 0) {
						// console.log("Element above viewport, adding is-hidden-up:", target.id || target.className);
						target.classList.add("is-hidden-up");
					} else {
						// Element is below the viewport or in a state where it's not "hidden-up"
						// console.log("Element not above (likely below), removing is-hidden-up:", target.id || target.className);
						target.classList.remove("is-hidden-up");
					}
				}
			});
		}, observerOptions);

		sections.forEach((section) => {
			observer.observe(section);
		});

		// Validation
		const runValidations = () => {
			let isValid = true;
			// Explicitly type the form elements
			const nombreInput = document.getElementById(
				"nombre",
			) as HTMLInputElement;
			const emailInput = document.getElementById(
				"email",
			) as HTMLInputElement;
			const telefonoInput = document.getElementById(
				"telefono",
			) as HTMLInputElement;
			const mensajeInput = document.getElementById(
				"mensaje",
			) as HTMLTextAreaElement;

			const nombreHelper = document.getElementById("nombre")
				?.nextElementSibling as HTMLElement;
			const emailHelper = document.getElementById("email")
				?.nextElementSibling as HTMLElement;
			const telefonoHelper = document.getElementById("telefono")
				?.nextElementSibling as HTMLElement;
			const mensajeHelper = document.getElementById("mensaje")
				?.nextElementSibling as HTMLElement;

			const sendButton = document.getElementById(
				"submit-form",
			) as HTMLButtonElement;
			console.log(sendButton);

			// Reset previous invalid states
			nombreInput.classList.remove("is-invalid");
			emailInput.classList.remove("is-invalid");
			telefonoInput.classList.remove("is-invalid");
			mensajeInput.classList.remove("is-invalid");
			nombreHelper.innerHTML = "";
			emailHelper.innerHTML = "";
			telefonoHelper.innerHTML = "";
			mensajeHelper.innerHTML = "";

			// Get current values directly for validation
			const data = {
				nombre: nombreInput.value,
				email: emailInput.value,
				telefono: telefonoInput.value,
				mensaje: mensajeInput.value,
			};

			if (!data.nombre) {
				nombreInput.classList.add("is-invalid");
				nombreHelper.innerHTML = "Il campo è obbligatorio";
				isValid = false;
			}

			if (!data.email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email)) {
				emailInput.classList.add("is-invalid");
				emailHelper.innerHTML = "Formato e-mail non valido";
				isValid = false;
			}

			if (!data.telefono) {
				telefonoInput.classList.add("is-invalid");
				telefonoHelper.innerHTML = "Il campo è obbligatorio";
				isValid = false;
			}

			if (!data.mensaje) {
				mensajeInput.classList.add("is-invalid");
				mensajeHelper.innerHTML = "Il campo è obbligatorio";
				isValid = false;
			}

			if (!isValid) {
				return false; // Indicate validation failure
			}
			return true; // Indicate validation success
		};

		// Debounce function
		let debounceTimer: number;
		const debouncedValidate = () => {
			clearTimeout(debounceTimer);
			debounceTimer = window.setTimeout(() => {
				runValidations();
			}, 500);
		};

		const form = document.getElementById("contact-form") as HTMLFormElement;
		const formInputs = form.querySelectorAll("input, textarea");

		formInputs.forEach((input) => {
			input.addEventListener("keyup", debouncedValidate);
		});

		form?.addEventListener("submit", (event) => {
			event.preventDefault(); // Prevents page reload

			if (!runValidations()) {
				return; // Stop submission if validation fails
			}

			const formData = new FormData(form);
			const data: { [key: string]: any } = {};
			for (const [key, value] of formData.entries()) {
				data[key] = value;
			}

			let mensaje = null;

			fetch(
				"https://formsubmit.co/ajax/a0e7f1761136a918757612b9a39ef47d",
				{
					method: "POST",
					headers: {
						"Content-Type": "application/json",
						Accept: "application/json",
					},
					body: JSON.stringify(data),
				},
			)
				.then((response) => {
					if (response.ok) {
						mensaje =
							"Grazie per fornire questo messaggio, nel frattempo potete contattarmi tramite il mio profilo in LinkedIn <a href='https://www.linkedin.com/in/tom%C3%A1s-cabrera/'>qui</a>";
						form.reset();
					} else {
						mensaje =
							"Un'errore è sucesso al tentare inviare il modulo. Riprova più tardi.";
					}
					document
						.getElementById("mensaje-respuesta")
						?.removeAttribute("hidden");
					document.getElementById("mensaje-respuesta")!.innerHTML =
						mensaje;
					return response.json();
				})
				.then((data) => console.log(data))
				.catch((error) => console.log(error));
		});
	});
</script>
